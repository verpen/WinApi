//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
/* Задание B4. Сформировать два приложения, которые открывают по одному окну. В окне 1 по щелчку левой клавиши мыши (при помощи
   FindWindow()) найти дескриптор окна 2. Выдать сообщение открыто или нет второе окно. При помощи функции SendMessage()  и поля
   WPARAM  передать свой дескриптор второму окну. Выдать сообщение об этом. В окне 2 при получении сообщения WM_USER+1 выдать
   сообщение об этом. При получении сообщения WM_USER+2 изменить цвет фона второго окна (каждый раз менять на рандомный цвет). */
   //————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
   // Подключение библиотек в программу
#include <Windows.h>	// Библиотека, в которую помещены определения API-функций
#include <tchar.h>		// Библиотека, в которую помещены макросы для создания строки Unicode
//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Объявление глобальных переменных
TCHAR WinName[] = _T("Первое окно"); // Имя окна
//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Объявление прототипа функции
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // Оконная функция (Функция обратного вызова)
//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Главная функция
int WINAPI _tWinMain(HINSTANCE This, HINSTANCE Prev, LPTSTR cmd, int mode) { // Главная функция
	/*	Дескриптор используется для описания объектов операционной системы
		HINSTANCE This	Дескриптор текущего приложения (Дескриптор, присваиваемый операционной системой при загрузке приложения)
		HINSTANCE Prev	Дескриптор. В современных системах всегда 0 (Хранение дескриптора предыдущего экземпляра приложения)
		LPTSTR cmd      Командная строка (Указатель командной строки, но без имени запускаемой программы)
		int mode 		Режим отображения окна (Нужен для функции ShowWindow) */

	HWND     hWnd; // Дескриптор главного окна программы (Идентификатор указывающий на окно) 
	MSG      msg;  // Структура, в которой хранится информация о сообщении, передаваемом операционной системой окну приложения
	WNDCLASS wc;   // Класс окна "Второе окно"

	// Определение класса окна (wc — структура, содержащая информацию по настройке окна)
	wc.hInstance = This;                                   // Дескриптор текущего приложения
	wc.lpszClassName = WinName; 				           // Имя класса окна
	wc.lpfnWndProc = WndProc; 					           // Функция окна
	wc.style = CS_HREDRAW | CS_VREDRAW; 		           // Стиль окна
	wc.hIcon = LoadIcon(NULL, IDI_INFORMATION);            // Стандартная иконка
	wc.hCursor = LoadCursor(NULL, IDC_HAND); 	           // Стандартный курсор
	wc.lpszMenuName = NULL; 					           // Нет меню
	wc.cbClsExtra = 0; 						               // Нет дополнительных данных класса
	wc.cbWndExtra = 0; 						               // Нет дополнительных данных окна
	wc.hbrBackground = CreateSolidBrush(RGB(0, 100, 100)); // Заполнение окна цветом

	// Регистрация класса окна
	if (!RegisterClass(&wc)) return 0; // Регистрация класса окна

	// Создание окна 
	hWnd = CreateWindow(WinName, _T("Второе окно"), WS_OVERLAPPEDWINDOW, 0,450, // По умолчанию
		800, 450, HWND_DESKTOP, NULL, This, NULL);                                // Функция которая создаёт окно
/*	WinName				 Имя класса окна
	_T("Лабораторная 1") Заголовок окна
	WS_OVERLAPPEDWINDOW  Стиль окна
	1125	             x (Горизонтальная позиция окна, тут это заданная по умолчанию позиция CW_USEDEFAULT)
	0  		             y (Вертикальная позиция окна)
	800  	    	     Ширина окна
	450         		 Высота окна
	HWND_DESKTOP 		 Дескриптор родительского окна
	NULL  				 Нет меню (Дискриптор меню)
	This  				 Дескриптор приложения
	NULL 				 Дополнительной информации нет (Указатель на данные создания окна) */

	// Открытие окна
	ShowWindow(hWnd, mode); // Показать окно

	// Цикл обработки сообщений 
	while (GetMessage(&msg, NULL, 0, 0)) { // Цель цикла — получение и обработка сообщений, передаваемых операционной системой
		/*	Второй параметр hwnd — определяет окно, для которого предназначено сообщение, если же необходимо перехватить
			сообщения всех окон данного приложения, он должен быть NULL;
			Остальные два параметра определяют[min, max] диапазон получаемых сообщений.
			Чаще всего необходимо обработать все сообщения, тогда эти параметры должны быть равны 0.*/
		TranslateMessage(&msg); // Функция, которая транслирует код нажатой клавиши в клавиатурные сообщения WM_CHAR
		DispatchMessage(&msg); 	// Посылает сообщение функции WndProc() (Возврат преобразованного сообщения операционной системе)
	} return 0; // Успешное завершение функции
}
//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Функция обратного вызова
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) { // Оконная функция (Функция обратного вызова)
	/*	HWND	 Дескриптор главного окна программы (Идентификатор указывающий на окно)
		UINT	 Тип сообщения
		WPARAM	 Параметр сообщения, содержащий дополнительную информацию
		LPARAM   Параметр сообщения, содержащий дополнительную информацию */

	HDC hdc;		// Идентификатор контекста устройства
	PAINTSTRUCT ps; // Структура для работы контекста (PAINTSTRUCT)
	static HBRUSH brush = CreateSolidBrush(RGB(rand() % 256, rand() % 256, rand() % 256)); // Заполнение окно рандомным цветом
	switch (message) {      // Переключатель, обеспечивающий выбор соответствующего обработчика сообщений по его номеру message
	case WM_DESTROY:		// Сообщение отправляется, когда окно разрушается
		PostQuitMessage(0);	// Функция, которая завершает приложение и передает операционной системе код возврата — 0
							// В результате цикл обработки сообщений прекращается и завершается работа приложения
		break;				// Выход из case

	case WM_USER + 1: // Сообщение, переданное первым окном
		MessageBox(hWnd, _T("Получено сообщение первого окна"), _T("Сообщение второго окна"), NULL); // Функция
			/* Создаёт, показывает на экране и использует окно сообщения
			   1 — Дискриптор окна владельца (тут NULL-окно сообщения не имеет окна владельца)
			   2 — Сообщение показываемое на экране
			   3 — Заголовок диалогового окна
			   4 — Содержание и режим работы диалогового окна (Установка флага) */
		break;        // Выход из case

	case WM_USER + 2: // Сообщение переданное первым окном
		brush = CreateSolidBrush(RGB(rand() % 256, rand() % 256, rand() % 256)); //Заполнение окна рандомным цветом 
			// Это происходит при нажатии правой кнопки мыши в первом окне
		InvalidateRect(hWnd, NULL, false); // Функция, которая добавляет прямоугольник к обновляемому региону заданного окна
			// Обновленный регион — часть рабочей области, которая должна быть перерисована
		/* 1 — дискриптор окна, обновляемый регион которого изменился
		   2 — координаты рабочей области, которая будет добавлена к обновляемому региону
			   NULL-вся рабочая область добавляется к обновляемому региону
		   3 — устанавливает, должен ли фон внутри обновляемого региона быть стёрт, когда обновляемый регион обрабатывается */
		break;        // Выход из Case

	case WM_PAINT:						   // Сообщение, которое отправляется при запросе для окраски части окна приложения
		hdc = BeginPaint(hWnd, &ps);       // Функция рисования контекста устройства (Работа с окном вывода) 
		FillRect(hdc, &ps.rcPaint, brush); // Полностью заполняет прямоугольник при помощи кисти brush (где описан цвет)
		EndPaint(hWnd, &ps);               // Функция для освобождения контекста устройства

	default:    // Во всех остальных случаях
		return DefWindowProc(hWnd, message, wParam, lParam); // Функция, которая гарантирует обработку каждого сообщения
	} return 0; // Успешное завершение функции
}               // Конец функции
//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————